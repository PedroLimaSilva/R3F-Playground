/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useMemo, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useLoader } from '@react-three/fiber';
import { MathUtils, ShaderMaterial, TextureLoader } from 'three';
import { DefaultVertex, TextureMixFragment } from '../materials/TextureMix';

export function Hogwarts(
  props: JSX.IntrinsicElements['group'] & { isDarkMode?: boolean },
) {
  const { nodes } = useGLTF('/model/Hogwarts.glb') as any;

  const nightTexture45 = useLoader(TextureLoader, '/model/Hogwarts45_Night.png');
  nightTexture45.flipY = false;
  const dayTexture45 = useLoader(TextureLoader, '/model/Hogwarts45_Day.png');
  dayTexture45.flipY = false;

  const nightTextureMain = useLoader(TextureLoader, '/model/Hogwarts_Night.png');
  nightTextureMain.flipY = false;
  const dayTextureMain = useLoader(TextureLoader, '/model/Hogwarts_Day.png');
  dayTextureMain.flipY = false;

  const nightTextureBG = useLoader(TextureLoader, '/model/HogwartsBG_Night.png');
  nightTextureBG.flipY = false;
  const dayTextureBG = useLoader(TextureLoader, '/model/HogwartsBG_Day.png');
  dayTextureBG.flipY = false;

  const [mix, setMix] = useState(props.isDarkMode ? 1 : 0);

  useFrame(() => {
    if ((props.isDarkMode && mix !== 1) || (!props.isDarkMode && mix !== 0)) {
      setMix(MathUtils.lerp(mix, props.isDarkMode ? 1 : 0, 0.05));
    }
  });

  const material45 = useMemo(
    () =>
      new ShaderMaterial({
        uniforms: {
          textureA: { value: dayTexture45 as THREE.Texture },
          textureB: { value: nightTexture45 as THREE.Texture },
          mixWeight: { value: mix },
        },
        vertexShader: DefaultVertex,
        fragmentShader: TextureMixFragment,
      }),
    [mix],
  );

  const materialMain = useMemo(
    () =>
      new ShaderMaterial({
        uniforms: {
          textureA: { value: dayTextureMain as THREE.Texture },
          textureB: { value: nightTextureMain as THREE.Texture },
          mixWeight: { value: mix },
        },
        vertexShader: DefaultVertex,
        fragmentShader: TextureMixFragment,
      }),
    [mix],
  );

  const materialBG = useMemo(
    () =>
      new ShaderMaterial({
        uniforms: {
          textureA: { value: dayTextureBG as THREE.Texture },
          textureB: { value: nightTextureBG as THREE.Texture },
          mixWeight: { value: mix },
        },
        vertexShader: DefaultVertex,
        fragmentShader: TextureMixFragment,
      }),
    [mix],
  );
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.BG_Baked.geometry} material={materialBG} />
      <mesh
        geometry={nodes.pl0001_Baked.geometry}
        material={materialMain}
        position={[0.154, 0.386, 0.002]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={0.00645}
      />
      <mesh
        geometry={nodes.pl0_node001_Baked.geometry}
        material={material45}
        position={[-0.258, 0.177, 0.096]}
        rotation={[-Math.PI / 2, 0, 2.356]}
        scale={0.00645}
      />
    </group>
  );
}

useGLTF.preload('/model/Hogwarts.glb');
